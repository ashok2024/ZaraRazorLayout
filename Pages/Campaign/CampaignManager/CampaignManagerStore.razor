@using ZaraBlazorStandlone.Pages.Shared
@inject IJSRuntime JS
<div class="search-show-wrapper">
    <div class="group-175408">
        <div class="type-to-search">
            <InputText class="searchBox"
                       @bind-Value="SearchText"
                       @oninput="OnSearchTextChanged"
                       placeholder="Type To Search" style="border: none;
    border-bottom: 1.5px solid #000;
    border-radius: 0;
    outline: none;
    padding-left: 0;
    padding-right: 0;
    background: transparent;
    box-shadow: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;" />
        </div>
    </div>
    <div class="group-175407">
        <div class="show">
            <span><span class="show-span2">Show</span></span>
        </div>
        <select class="_10" @onchange="PageSizeChanged">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="All">All</option>
        </select>
        <img class="icon-material-round-arrow-drop-down"
             src="/images/icons/Icon material-round-arrow-drop-down.png" />

    </div>
</div>
<div class="my-scrollable-div" style="height:400px ; overflow:auto; margin-top: 10px;">
    <div class="group-229081">
        <table class="table table-bordered align-middle text-center campaign-table mt-3">
            <thead class="bg-info bg-opacity-10">
                <tr>
                    <th class="border-0 tr-custome-bg-color element-code text-start">Store number</th>
                    <th class="border-0 tr-custome-bg-color element-code text-start">Store name</th>
                    <th class="border-0 tr-custome-bg-color element-code text-start">include campaign <input type="checkbox" id="selectAll" onclick="toggleAll(this)" /> </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in campaignStoreItemsfilterd)
                {

                    <tr class="custom-row-style">
                        <td class="td-custome-b-none tr-text-custome text-start">@item.StoreNumber</td>
                        <td class="td-custome-b-none tr-text-custome text-start">@item.StoreName</td>
                        <td class="td-custome-b-none tr-text-custome rowCheckbox text-start"><input type="checkbox" value="@item.IncludeCampaign" onclick="updateSelectAll()" /></td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

<Pagination CurrentPage="@CurrentPage"
            TotalPages="@TotalPages"
            TotalItems="@campaignStoreItemsfilterd.Count"
            PageSize="@PageSize"
            OnPageChanged="ChangePage" />

@code {
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 10;
    private string? SearchText;
    private string selectedView = "item";
    public List<CampaignStoreItem> campaignStoreItems = new List<CampaignStoreItem>();
    public List<CampaignStoreItem> campaignStoreItemsfilterd = new List<CampaignStoreItem>();
    private void SelectView(string view)
    {
        selectedView = view;
    }
    private void ChangePage(int newPage)
    {
        CurrentPage = newPage;
        // LoadCampaigns();
    }
    private string GetButtonClass(string view)
    {
        return selectedView == view
            ? "btn btn-primary custom-btn"
            : "btn btn-outline-secondary custom-btn";
    }
    private async Task OnSearchTextChanged(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString();
        string keyword = SearchText?.Trim();
        campaignStoreItemsfilterd = campaignStoreItems;
        IEnumerable<CampaignStoreItem> filtered = campaignStoreItemsfilterd;

        if (!string.IsNullOrWhiteSpace(keyword))
        {
            filtered = filtered.Where(c =>
                (!string.IsNullOrWhiteSpace(c.StoreName) && c.StoreName.Contains(keyword, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(c.StoreNumber) && c.StoreNumber.Contains(keyword, StringComparison.OrdinalIgnoreCase)));
        }

        // Reset pagination
        CurrentPage = 1;

        // Apply pagination
        int totalItems = filtered.Count();
        TotalPages = (int)Math.Ceiling(totalItems / (double)PageSize);
        campaignStoreItemsfilterd = filtered
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
        StateHasChanged();
    }
    private string SelectedValue = "10";  // default

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        SelectedValue = e.Value?.ToString();
        int pageSize;

        if (SelectedValue == "All")
        { 
            pageSize = -1;
        }
        else if (!int.TryParse(SelectedValue, out pageSize))
        {
            pageSize = 10;
        }

        Console.WriteLine($"Page size changed to: {pageSize}");
        // Optionally use await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {


        campaignStoreItems = new List<CampaignStoreItem>
    {
        new CampaignStoreItem
        {
            StoreNumber = "001",
            StoreName = "London Store",
            IncludeCampaign = false
        },
        new CampaignStoreItem
        {
            StoreNumber = "002",
            StoreName = "Manchester Store",
            IncludeCampaign = false
        }
        ,
        new CampaignStoreItem
        {
            StoreNumber = "003",
            StoreName = "Birmingham Store",
            IncludeCampaign = false
        },
        new CampaignStoreItem
        {
            StoreNumber = "004",
            StoreName = "Brighton Store",
            IncludeCampaign = false
        },
        new CampaignStoreItem
        {
            StoreNumber = "005",
            StoreName = "Cardiff Store",
            IncludeCampaign = false
        },
       new CampaignStoreItem
        {
            StoreNumber = "006",
            StoreName = "Edinburgh Store",
            IncludeCampaign = false
        }
        // Add more items if needed
    };

        campaignStoreItemsfilterd = campaignStoreItems;

    }
    public class CampaignStoreItem
    {
        public string StoreNumber { get; set; }
        public string StoreName { get; set; }
        public bool IncludeCampaign { get; set; }
    }
}