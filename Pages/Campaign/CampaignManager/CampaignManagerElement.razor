@using ZaraBlazorStandlone.Pages.Shared
@page "/pagesize-test"
@inject IJSRuntime JS
<div class="search-show-wrapper">
    <div class="group-175408">
        <div class="type-to-search">
            <InputText class="searchBox"
                       @bind-Value="SearchText"
                       @oninput="OnSearchTextChanged"
                       placeholder="Type To Search" style="border: none;
    border-bottom: 1.5px solid #000;
    border-radius: 0;
    outline: none;
    padding-left: 0;
    padding-right: 0;
    background: transparent;
    box-shadow: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;" />
        </div>
    </div>
    <div class="group-175407">
        <div class="show">
            <span><span class="show-span2">Show</span></span>
        </div>
        <select class="_10" @onchange="PageSizeChanged">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="All">All</option>
        </select>
        <img class="icon-material-round-arrow-drop-down"
             src="/images/icons/Icon material-round-arrow-drop-down.png" />

    </div>
</div>
<div class="my-scrollable-div" style="height:400px ; overflow:auto; margin-top: 10px;">
    <div class="group-229081">
        <table class="table table-bordered align-middle text-center campaign-table mt-3">
            <thead class="bg-info bg-opacity-10">
                <tr>
                    <th class="border-0 tr-custome-bg-color element-code">Element code</th>
                    <th class="border-0 tr-custome-bg-color element-code">Element type</th>
                    <th class="border-0 tr-custome-bg-color element-code">Image</th>
                    <th class="border-0 tr-custome-bg-color element-code">Element Disc</th>
                    <th class="border-0 tr-custome-bg-color element-code">Site</th>
                    <th class="border-0 tr-custome-bg-color element-code">Allocated Qty</th>
                    <th class="border-0 tr-custome-bg-color element-code">Price</th>
                    <th class="border-0 tr-custome-bg-color element-code">Estimate Number</th>
                    <th class="border-0 tr-custome-bg-color element-code">Add Store</th>
                    <th class="border-0 tr-custome-bg-color element-code">Remove</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in campaignElementItemsfilterd)
                {

                    <tr class="custom-row-style">
                        <td class="td-custome-b-none tr-text-custome">@item.ElementCode</td>
                        <td class="td-custome-b-none tr-text-custome">@item.ElementType</td>
                        <td class="td-custome-b-none tr-text-custome"><img src="@item.Image" /></td>
                        <td class="td-custome-b-none tr-text-custome">@item.ElementDisc</td>
                        <td class="td-custome-b-none tr-text-custome">@item.Site</td>
                        <td class="td-custome-b-none tr-text-custome">@item.AlocatedQty</td>
                        <td class="td-custome-b-none tr-text-custome">£ @item.Price</td>
                        <td class="td-custome-b-none tr-text-custome">@item.EstimateNumber</td>
                        <td class="td-custome-b-none tr-text-custome"></td>
                        <td class="td-custome-b-none tr-text-custome"><img src="/Images/Icons/Component 20 – 1.png" /></td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

<Pagination CurrentPage="@CurrentPage"
            TotalPages="@TotalPages"
            TotalItems="@campaignElementItems.Count"
            PageSize="@PageSize"
            OnPageChanged="ChangePage" />

@code {
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 10;
    private string? SearchText;
    private string selectedView = "item";
    public List<CampaignElementItem> campaignElementItems = new List<CampaignElementItem>();
    public List<CampaignElementItem> campaignElementItemsfilterd = new List<CampaignElementItem>();
    private void SelectView(string view)
    {
        selectedView = view;
    }
    private void ChangePage(int newPage)
    {
        CurrentPage = newPage;
        // LoadCampaigns();
    }
    private string GetButtonClass(string view)
    {
        return selectedView == view
            ? "btn btn-primary custom-btn"
            : "btn btn-outline-secondary custom-btn";
    }
    private async Task OnSearchTextChanged(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString();
        string keyword = SearchText?.Trim();

        IEnumerable<CampaignElementItem> filtered = campaignElementItems;

        if (!string.IsNullOrWhiteSpace(keyword))
        {
            filtered = filtered.Where(c =>
                (!string.IsNullOrWhiteSpace(c.ElementCode) && c.ElementCode.Contains(keyword, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(c.ElementType) && c.ElementType.Contains(keyword, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(c.ElementDisc) && c.ElementDisc.Contains(keyword, StringComparison.OrdinalIgnoreCase)));
        }

        // Reset pagination
        CurrentPage = 1;

        // Apply pagination
        int totalItems = filtered.Count();
        TotalPages = (int)Math.Ceiling(totalItems / (double)PageSize);
        campaignElementItemsfilterd = filtered
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
        StateHasChanged();
    }
    private string SelectedValue = "10";  // default

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        SelectedValue = e.Value?.ToString();
        int pageSize;

        if (SelectedValue == "All")
        { 
            pageSize = -1;
        }
        else if (!int.TryParse(SelectedValue, out pageSize))
        {
            pageSize = 10;
        }

        Console.WriteLine($"Page size changed to: {pageSize}");
        // Optionally use await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {


        campaignElementItems = new List<CampaignElementItem>
    {
        new CampaignElementItem
        {
            ElementCode = "222572",
            ElementType = "Type 1",
            Image = "/images/icons/Icon fa-regular-image.png",
            ElementDisc = "A2 Type Poster",
            Site = 10,
            AlocatedQty = 33,
            Price = 174.65m,
            EstimateNumber = 35,
            AddToStore = false
        },
        new CampaignElementItem
        {
            ElementCode = "222572",
            ElementType = "Type 1",
            Image = "/images/icons/Icon fa-regular-image.png",
            ElementDisc = "A2 Type Poster",
            Site = 10,
            AlocatedQty = 33,
            Price = 174.65m,
            EstimateNumber = 35,
            AddToStore = false
        }
        ,
        new CampaignElementItem
        {
            ElementCode = "222572",
            ElementType = "Type 1",
            Image = "/images/icons/Icon fa-regular-image.png",
            ElementDisc = "A2 Type Poster",
            Site = 10,
            AlocatedQty = 33,
            Price = 174.65m,
            EstimateNumber = 35,
            AddToStore = false
        },
        new CampaignElementItem
        {
            ElementCode = "222572",
            ElementType = "Type 1",
            Image = "/images/icons/Icon fa-regular-image.png",
            ElementDisc = "A2 Type Poster",
            Site = 10,
            AlocatedQty = 33,
            Price = 174.65m,
            EstimateNumber = 35,
            AddToStore = false
        },
        new CampaignElementItem
        {
            ElementCode = "222572",
            ElementType = "Type 1",
            Image = "/images/icons/Icon fa-regular-image.png",
            ElementDisc = "A2 Type Poster",
            Site = 10,
            AlocatedQty = 33,
            Price = 174.65m,
            EstimateNumber = 35,
            AddToStore = false
        },
        new CampaignElementItem
        {
            ElementCode = "222572",
            ElementType = "Type 1",
            Image = "/images/icons/Icon fa-regular-image.png",
            ElementDisc = "A2 Type Poster",
            Site = 10,
            AlocatedQty = 33,
            Price = 174.65m,
            EstimateNumber = 35,
            AddToStore = false
        }
        // Add more items if needed
    };

        campaignElementItemsfilterd = campaignElementItems;

    }
    public class CampaignElementItem
    {
        public string ElementCode { get; set; }
        public string ElementType { get; set; }
        public string Image { get; set; }
        public string ElementDisc { get; set; }
        public int Site { get; set; }
        public int AlocatedQty { get; set; }
        public decimal Price { get; set; }
        public double EstimateNumber { get; set; }
        public bool AddToStore { get; set; }
    }
}