@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; } = 1;
    [Parameter] public int TotalItems { get; set; } = 0;
    [Parameter] public int PageSize { get; set; } = 10;

    [Parameter] public EventCallback<int> OnPageChanged { get; set; }

    // Calculate indexes shown in the "Showing X to Y of Z entries"
    private int ShowingFrom => (CurrentPage - 1) * PageSize + 1;
    private int ShowingTo => Math.Min(CurrentPage * PageSize, TotalItems);

    // Generate page numbers with ellipsis if needed
    private List<object> GetPageNumbers()
    {
        var pages = new List<object>();

        if (TotalPages <= 7)
        {
            for (int i = 1; i <= TotalPages; i++)
                pages.Add(i);
        }
        else
        {
            // Always show first 3, last 3, current ±1 pages with ellipsis
            pages.Add(1);
            pages.Add(2);

            if (CurrentPage > 4)
                pages.Add("...");

            int start = Math.Max(3, CurrentPage - 1);
            int end = Math.Min(TotalPages - 2, CurrentPage + 1);

            for (int i = start; i <= end; i++)
                pages.Add(i);

            if (CurrentPage < TotalPages - 3)
                pages.Add("...");

            pages.Add(TotalPages - 1);
            pages.Add(TotalPages);
        }

        return pages;
    }

    private async Task GoToPage(object page)
    {
        if (page is int p)
        {
            if (p < 1) p = 1;
            if (p > TotalPages) p = TotalPages;

            if (p != CurrentPage)
                await OnPageChanged.InvokeAsync(p);
        }
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
            await OnPageChanged.InvokeAsync(CurrentPage + 1);
    }
}
<div class="pagination-wrapper">
    <div class="showing-1-to-10-of-52-entries">
        <span class="showing-1-to-10-of-52-entries-span2">
            Showing @ShowingFrom to @ShowingTo of @TotalItems entries
        </span>
    </div>

    @if (TotalPages > 1)
    {
        <div class="group-175314">
            <!-- Left Arrow (Only show if not on first page) -->
            @if (CurrentPage > 1)
            {
                <img class="icon-material-round-keyboard-arrow-right2"
                     src="/images/icons/Icon material-round-keyboard-arrow-right.png"
                     @onclick="NextPage"
                     style="cursor:pointer; transform: rotate(180deg);" />
            }

            <!-- Page Numbers -->
            @foreach (var page in GetPageNumbers())
            {
                if (page is int p)
                {
                    var cssClass = p == CurrentPage ? $"_active-page" : $"_page";
                    <div class="@cssClass" @onclick="@(() => GoToPage(p))" style="cursor:pointer">@p</div>
                }
                else if (page is string s)
                {
                    <div class="ellipsis">@s</div>
                }
            }

            <!-- Right Arrow (Only show if not on last page) -->
            @if (CurrentPage < TotalPages)
            {
                <img class="icon-material-round-keyboard-arrow-right"
                     src="/images/icons/icon-material-round-keyboard-arrow-right0.png"
                     @onclick="NextPage"
                     style="cursor:pointer" />
            }
        </div>
    }
</div>
