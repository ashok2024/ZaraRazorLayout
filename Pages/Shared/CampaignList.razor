
@using ZaraBlazorStandlone.Models
@using ZaraBlazorStandlone.Pages.Campaign.CampaignManager
@inject IJSRuntime JS
@* @foreach (var campaign in Campaigns)
{
    <CampaignCard Item="campaign" />
} *@

@code {
    [Parameter] public EventCallback<int> OnPageSizeChanged { get; set; }
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public List<CampaignItem> Campaigns { get; set; }
    [Parameter]
    public EventCallback<string> OnSearchTextChangedFromChild { get; set; }

    private string selectedCampaignNo = "";
    private string selectedReferenceNo = "";


    private string SelectedValue = "10"; // default
    private string SearchText;
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 10;
    [Parameter]
    public EventCallback<(string CampaignNo, string ReferenceNo)> OnCampaignSelected { get; set; }
    private void OnDotClick(string campaignNo, string referenceNo)
    {
        OnCampaignSelected.InvokeAsync((campaignNo, referenceNo));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initDotClick");
        }
    }
    private void ChangePage(int newPage)
    {
        CurrentPage = newPage;
        // LoadCampaigns();
    }
     private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)Campaigns.Count / PageSize);

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await OnPageChanged.InvokeAsync(page);
    }
    private async Task OnSearchTextChanged(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString();
        await OnSearchTextChangedFromChild.InvokeAsync(SearchText);
    }
    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        SelectedValue = e.Value?.ToString();
        int pageSize;

        if (SelectedValue == "All")
        {
            pageSize = -1;
        }
        else if (!int.TryParse(SelectedValue, out pageSize))
        {
            pageSize = 10;
        }

        await OnPageSizeChanged.InvokeAsync(pageSize);
    }
    private async Task PageChanged(int newPage)
    {
        CurrentPage = newPage;
        await OnPageChanged.InvokeAsync(newPage);
    }
    // private void ChangePage(int newPage)
    // {
    //     if (newPage >= 1 && newPage <= TotalPages)
    //     {
    //         CurrentPage = newPage;
    //         LoadCampaigns();
    //         StateHasChanged(); // Ensure the UI updates
    //     }
    // }
}

@* <img class="union-1" src="/images/icons/Union-1.png" />
    <img class="line-35" src="/images/icons/Line-35.png" /> *@

<div class="card mt-3">
    <div class="card-body">
        <div class="search-show-wrapper">
            <div class="group-175408">
                <div class="type-to-search">
                    <InputText class="searchBox"
                               @bind-Value="SearchText"
                               @oninput="OnSearchTextChanged"
                               placeholder="Type To Search" style="border: none;
    border-bottom: 1.5px solid #000;
    border-radius: 0;
    outline: none;
    padding-left: 0;
    padding-right: 0;
    background: transparent;
    box-shadow: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;" />
                </div>
            </div>
            <div class="group-175407">
                <div class="show">
                    <span><span class="show-span2">Show</span></span>
                </div>
                <select class="_10" @onchange="PageSizeChanged" value="@SelectedValue">
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="All">All</option>
                </select>
                <img class="icon-material-round-arrow-drop-down"
                     src="/images/icons/Icon material-round-arrow-drop-down.png" />
              
            </div>
        </div>
        <img class="line-35" src="/images/icons/Line-35.png" />
        <div class="frame-1">
            @if (Campaigns != null)
            {
                @foreach (var campaign in Campaigns)
                {
                    string refNo = campaign.CampaignReference;
                    string campNo = campaign.CampaignNumber;
                    @* <div class="line-3"></div>
                <div class="line-27"></div>
                <div class="line-28"></div>
                <div class="line-29"></div> *@
                    <div class="component-6">
                        <div class="rectangle-155967"></div>
                        <div class="rectangle-155971"></div>
                        <div class="delivery-date-01-03-2025">
                            <span>
                                <span class="delivery-date-01-03-2025-span">Delivery Date:</span>
                                <span class="delivery-date-01-03-2025-span2"></span>
                                <span class="delivery-date-01-03-2025-span3">@campaign.DeliveryDate.ToString("dd/MM/yyyy")</span>
                            </span>
                        </div>
                        <div class="price-459-08">
                            <span>
                                <span class="price-459-08-span">Price</span>
                                <span class="price-459-08-span2">:</span>
                                <span class="price-459-08-span3"></span>
                                <span class="price-459-08-span4">£@campaign.Price.ToString("N2")</span>
                            </span>
                        </div>
                        <div class="rectangle-155972"></div>
                        <div class="no-of-items-3345">
                            <span>
                                <span class="no-of-items-3345-span">No of Items:</span>
                                <span class="no-of-items-3345-span2"></span>
                                <span class="no-of-items-3345-span3">@campaign.NoOfItems</span>
                            </span>
                        </div>
                        <div class="delivery-points-1920">
                            <span>
                                <span class="delivery-points-1920-span">Delivery Points:</span>
                                <span class="delivery-points-1920-span4">@campaign.DeliveryPoints</span>
                            </span>
                        </div>
                        <div class="rectangle-155970"></div>
                        <div class="clearance-event">
                            <span>
                                @*    <span class="clearance-event-span">@campaign.IsClearanceEvent.ToString().Substring(0, 1)</span> *@
                                <span class="clearance-event-span2">Clearance event</span>
                            </span>
                        </div>
                        <div class="create-by-jane-doe">
                            <span>
                                <span class="create-by-jane-doe-span">Create</span>
                                <span class="create-by-jane-doe-span2">by</span>
                                <span class="create-by-jane-doe-span">: @campaign.CreatedBy</span>
                            </span>
                        </div>
                        <div class="campaign-no-1080">Campaign No : @campaign.CampaignNumber</div>
                        <div class="campaign-ref-9865362">Campaign ref : @campaign.CampaignReference</div>
                        <div class="rectangle-155969"></div>
                        <div class="rectangle-155973"></div>
                        <div class="delivery-100">Delivery : @campaign.DeliveryPercentage%</div>
                        <div class="last-tracked-06-09-2024">
                            <span>
                                <span class="last-tracked-06-09-2024-span">Last Tracked:</span>
                                <span class="last-tracked-06-09-2024-span2"></span>
                                <span class="last-tracked-06-09-2024-span3">@campaign.LastTrackedDate.ToString("dd/MM/yyyy")</span>
                            </span>
                        </div>
                        <div class="rectangle-155974"></div>
                        <div class="delivered">
                            <span>
                                <span class="delivered-span2">@campaign.Status</span>
                            </span>
                        </div>
                        <div class="in-transit">
                            <span>
                                <span class="in-transit-span2">@campaign.TrackingStatus</span>
                            </span>
                        </div>
                        <div class="no-tracking">
                            <span>
                                <span class="no-tracking-span2">@campaign.TrackingStatus</span>
                            </span>
                        </div>
                        <div class="rectangle-155977"></div>
                        <div class="rectangle-155978"></div>
                        <div class="rectangle-155979"></div>
                        <div class="rectangle-155981"></div>
                        <div class="rectangle-155982"></div>
                        <div class="rectangle-155975"></div>
                        <div class="status">Status</div>
                        <div class="sent-to-supplier">Sent To Supplier</div>

                        <div class="ellipse-11 ellipse-dot" @onclick="() => OnDotClick(campNo, refNo)"></div>
                        <div class="ellipse-12 ellipse-dot" @onclick="() => OnDotClick(campNo, refNo)"></div>
                        <div class="ellipse-13 ellipse-dot" @onclick="() => OnDotClick(campNo, refNo)"></div>
                    </div>
                    <div class="line-3"></div>
                }
            }
            else
            {
                <p>Loading campaigns...</p>
            }

        </div>
    </div>
    <div class="card-footer">
        <Pagination CurrentPage="@CurrentPage"
                    TotalPages="@TotalPages"
                    TotalItems="@Campaigns.Count"
                    PageSize="@PageSize"
                    OnPageChanged="ChangePage" />
    </div>
    @* @if (TotalPages > 1)
    {
        <div class="pagination">
            <button class="pagination-button" @onclick="(() => ChangePage(CurrentPage - 1))" disabled="@(CurrentPage == 1)">Previous</button>
            @for (int i = 1; i <= TotalPages; i++)
            {
                <button class="pagination-button @(CurrentPage == i ? "active" : "")" @onclick="(() => ChangePage(i))">@i</button>
            }
            <button class="pagination-button" @onclick="(() => ChangePage(CurrentPage + 1))" disabled="@(CurrentPage == TotalPages)">Next</button>
        </div>
    } *@
</div>

